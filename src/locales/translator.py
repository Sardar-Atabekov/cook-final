import json
from googletrans import Translator
from pathlib import Path
import time
import os
import random
import re

translator = Translator()

LOCALES_DIR = Path(__file__).parent


def get_language_codes():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–µ–π, –∫—Ä–æ–º–µ en.json, ru.json –∏ translator.py"""
    codes = []
    for file in LOCALES_DIR.glob('*.json'):
        if file.name not in ('en.json', 'ru.json', "be.json", "ar.json", "es.json", 'translator.py'):
            codes.append(file.stem)
    return codes

def protect_variables(text):
    """–ó–∞—â–∏—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ {variable}
    variables = re.findall(r'\{[^}]+\}', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    protected_text = text
    for i, var in enumerate(variables):
        placeholder = f"__VAR_{i}__"
        protected_text = protected_text.replace(var, placeholder)
    
    return protected_text, variables

def restore_variables(text, variables):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    restored_text = text
    for i, var in enumerate(variables):
        placeholder = f"__VAR_{i}__"
        restored_text = restored_text.replace(placeholder, var)
    
    return restored_text

def translate_text(text, target_lang, max_retries=3):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if not text or text.strip() == "":
        return text
    
    # –ó–∞—â–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    protected_text, variables = protect_variables(text)
    
    for attempt in range(max_retries):
        try:
            result = translator.translate(protected_text, src='en', dest=target_lang)
            translated = result.text
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            final_text = restore_variables(translated, variables)
            
            return final_text
            
        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} - –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{text[:50]}...': {e}")
            if attempt < max_retries - 1:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                sleep_time = (attempt + 1) * 3 + random.uniform(0, 2)
                print(f"–ñ–¥—ë–º {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(sleep_time)
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                return text

def translate_json_recursive(data, target_lang):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç JSON —Å –∑–∞—â–∏—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    if isinstance(data, dict):
        translated = {}
        for key, value in data.items():
            try:
                translated[key] = translate_json_recursive(value, target_lang)
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
                time.sleep(0.5 + random.uniform(0, 0.3))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∫–ª—é—á–∞ '{key}': {e}")
                translated[key] = value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return translated
    elif isinstance(data, list):
        translated_list = []
        for item in data:
            try:
                translated_list.append(translate_json_recursive(item, target_lang))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞: {e}")
                translated_list.append(item)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return translated_list
    elif isinstance(data, str):
        return translate_text(data, target_lang)
    else:
        return data

def main():
    en_file = LOCALES_DIR / 'en.json'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not en_file.exists():
        print(f"‚ùå –§–∞–π–ª {en_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        with open(en_file, 'r', encoding='utf-8') as f:
            source_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {en_file}: {e}")
        return

    lang_codes = get_language_codes()
    print(f"–ù–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {lang_codes}")

    for lang_code in lang_codes:
        output_file = LOCALES_DIR / f"{lang_code}.json"
        print(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ {lang_code}...")
        
        try:
            translated_data = translate_json_recursive(source_data, lang_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(translated_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ {lang_code} –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ {lang_code}: {e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏
        sleep_time = 8 + random.uniform(0, 3)
        print(f"–ñ–¥—ë–º {sleep_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —è–∑—ã–∫–æ–º...")
        time.sleep(sleep_time)
    
    print("üéâ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main()